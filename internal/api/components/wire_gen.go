// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package components

import (
	"github.com/RavisMsk/xmcompanies/internal/api/api"
	"github.com/RavisMsk/xmcompanies/internal/api/companies"
	"github.com/RavisMsk/xmcompanies/internal/api/companies/directstore"
	"github.com/RavisMsk/xmcompanies/internal/api/ipchecker"
	"github.com/RavisMsk/xmcompanies/internal/companies/store"
	mongo2 "github.com/RavisMsk/xmcompanies/internal/companies/store/mongo"
	"github.com/RavisMsk/xmcompanies/internal/pkg/ipapi"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
	"go.uber.org/zap"
	"go.uber.org/zap/zapcore"
	"net/http"
)

// Injectors from wire.go:

func InitializeAssembly(cfgPath string) (*Assembly, error) {
	config, err := ParseYAMLConfig(cfgPath)
	if err != nil {
		return nil, err
	}
	logger := createLogger(config)
	client, err := createMongoClient(config, logger)
	if err != nil {
		return nil, err
	}
	store := createMongoCompanies(client, logger)
	companies := createDirectMongoLayer(store)
	ipapiClient := createIPAPI(config)
	checker := createIPChecker(ipapiClient)
	api := createAPI(config, companies, checker, logger)
	assembly := NewAssembly(config, client, api, logger)
	return assembly, nil
}

// wire.go:

func createLogger(cfg *Config) *zap.Logger {
	lvl := zap.InfoLevel
	switch cfg.LogLevel {
	case "debug":
		lvl = zap.DebugLevel
	case "info":
		lvl = zap.InfoLevel
	case "warn":
		lvl = zap.WarnLevel
	case "error":
		lvl = zap.ErrorLevel
	}
	alvl := zap.NewAtomicLevelAt(lvl)
	zcfg := zap.NewProductionConfig()
	zcfg.Level = alvl
	zcfg.Encoding = "json"
	zcfg.EncoderConfig.EncodeTime = zapcore.ISO8601TimeEncoder
	zcfg.Sampling = nil
	logger, _ := zcfg.Build()
	return logger.Named("api")
}

func createMongoClient(cfg *Config, logger *zap.Logger) (*mongo.Client, error) {
	client, err := mongo.NewClient(options.Client().ApplyURI(cfg.MongoURL))
	if err != nil {
		return nil, err
	}
	return client, nil
}

func createMongoCompanies(client *mongo.Client, logger *zap.Logger) store.Store {
	db := client.Database("xm")
	return mongo2.NewStore(db.Collection("companies"))
}

func createDirectMongoLayer(store2 store.Store) companies.Companies {
	return directstore.NewDirectStoreCompanies(store2)
}

func createAPI(
	cfg *Config, companies2 companies.Companies,

	ipChecker ipchecker.Checker,
	logger *zap.Logger,
) *api.API {
	return api.NewAPI(cfg, companies2, ipChecker, logger.Named("api"))
}

func createIPAPI(cfg *Config) *ipapi.Client {
	return ipapi.NewClient(cfg.IPAPIKey, http.DefaultClient)
}

func createIPChecker(client *ipapi.Client) ipchecker.Checker {
	return ipchecker.NewIPAPIChecker(client)
}
